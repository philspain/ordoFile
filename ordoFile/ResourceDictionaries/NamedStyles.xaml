 <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <Style TargetType="Button" x:Key="FlatButtonStyle">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="13.333" />
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="0">
                        <ContentControl VerticalAlignment="Center" 
                                        HorizontalAlignment="Center" 
                                        Content="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" 
           x:Key="ButtonMenuStyle"
           BasedOn="{StaticResource FlatButtonStyle}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="200"/>
        <Setter Property="Height" Value="30"  />
        <Setter Property="Background" Value="#E9E9E9" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="#FF3299BB" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#424242" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" 
           x:Key="ButtonOrangeStyle"
           BasedOn="{StaticResource FlatButtonStyle}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="40"  />
        <Setter Property="Foreground" Value="White" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#FF9900" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#BF8630" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#E9E9E9" />
                <Setter Property="Foreground" Value="#BCBCBC" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" 
           x:Key="ButtonLargeOrangeStyle"
           BasedOn="{StaticResource FlatButtonStyle}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Margin" Value="50" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#FF9900" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#BF8630" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#E9E9E9" />
                <Setter Property="Foreground" Value="#BCBCBC" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" 
           x:Key="ButtonBlueStyle"
           BasedOn="{StaticResource FlatButtonStyle}">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="40"  />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#3299BB" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#3F798C" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#E9E9E9" />
                <Setter Property="Foreground" Value="#BCBCBC" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- style for the grid that contains the grids used in various filtering options-->
    <Style x:Key="SidebarStyle" TargetType="Grid">
        <Setter Property="Panel.ZIndex" Value="-10" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding SidebarZIndex}" Value="Hidden">
                <Setter Property="Panel.ZIndex" Value="-10" />
            </DataTrigger>
            <DataTrigger Binding="{Binding SidebarZIndex}" Value="Visible">
                <Setter Property="Panel.ZIndex" Value="10" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- style for the grid that allows user to filter types to organise -->
    <Style x:Key="FilterTypesStyle" TargetType="Grid">
        <Setter Property="Panel.ZIndex" Value="-10" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding FilterTypesZIndex}" Value="Hidden">
                <Setter Property="Panel.ZIndex" Value="-10" />
            </DataTrigger>
            <DataTrigger Binding="{Binding FilterTypesZIndex}" Value="Visible">
                <Setter Property="Panel.ZIndex" Value="10" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- style for the grid that allows user to save a preset filter -->
    <Style x:Key="SavePresetFilterStyle" TargetType="Grid">
        <Setter Property="Panel.ZIndex" Value="-10" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding SavePresetZIndex}" Value="Hidden">
                <Setter Property="Panel.ZIndex" Value="-10" />
            </DataTrigger>
            <DataTrigger Binding="{Binding SavePresetZIndex}" Value="Visible">
                <Setter Property="Panel.ZIndex" Value="10" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- style for the grid that allows user to save a preset filter -->
    <Style x:Key="SelectPresetStyle" TargetType="Grid">
        <Setter Property="Grid.Column" Value="1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Panel.ZIndex" Value="-3" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding SelectPresetZIndex}" Value="Hidden">
                <Setter Property="Panel.ZIndex" Value="-3" />
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectPresetZIndex}" Value="Visible">
                <Setter Property="Panel.ZIndex" Value="3" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonBGOrganiseStyle" 
           TargetType="Button"
           BasedOn="{StaticResource ButtonOrangeStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding BGOrganiseButtonContent}" Value="Start">
                <Setter Property="Command" Value="{Binding OrganisationCommand}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding BGOrganiseButtonContent}" Value="Stop">
                <Setter Property="Command" Value="{Binding CancelOrganisationCommand}" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Content" Value="{Binding BGOrganiseButtonContent}" />
        <Setter Property="IsEnabled" Value="{Binding BGOrganiseButtonEnabled}" />
    </Style>

    <Style x:Key="GridEditPresetStyle" 
           TargetType="Grid">
        <Setter Property="Background" Value="#FF424242" />
        <Setter Property="Panel.ZIndex" Value="-10" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding PresetEditZIndex}" Value="Hidden">
                <Setter Property="Panel.ZIndex" Value="-10" />
            </DataTrigger>
            <DataTrigger Binding="{Binding PresetEditZIndex}" Value="Visible">
                <Setter Property="Panel.ZIndex" Value="10" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="GridNewPresetStyle" 
           TargetType="Grid">
        <Setter Property="Background" Value="#FF424242" />
        <Setter Property="Panel.ZIndex" Value="-20" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding NewPresetZIndex}" Value="Hidden">
                <Setter Property="Panel.ZIndex" Value="-20" />
            </DataTrigger>
            <DataTrigger Binding="{Binding NewPresetZIndex}" Value="Visible">
                <Setter Property="Panel.ZIndex" Value="20" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- style for the grid used to display loading information to users -->
    <Style x:Key="WaitGridStyle" TargetType="Grid">
        <Setter Property="Panel.ZIndex" Value="-10" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding WaitGridZIndex}" Value="Hidden">
                <Setter Property="Panel.ZIndex" Value="-10" />
            </DataTrigger>
            <DataTrigger Binding="{Binding WaitGridZIndex}" Value="Visible">
                <Setter Property="Panel.ZIndex" Value="10" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- style for setting opacity of the waiting grid -->
    <Style x:Key="OpacityGridStyle" TargetType="Grid">
        <Setter Property="Panel.ZIndex" Value="0" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="Gray" Opacity="0.7" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WaitImageContainerStyle" TargetType="Grid">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="150" />
        <Setter Property="Height" Value="175" />
    </Style>
</ResourceDictionary>